{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\essam\\\\OneDrive\\\\Desktop\\\\New folder\\\\HealthLink\\\\healthlink_frontend-V2\\\\src\\\\Pages\\\\DashboardPatient.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport { useParams } from 'react-router-dom';\nimport PatientInfo from '../Components/PatientInfo';\nimport MedicalRecords from '../Components/MedicalRecords';\nimport Appointments from '../Components/Appointments';\nimport PatientSidebar from '../Components/PatientSidebar';\nimport '../Styles/PatientDashboard.css'; // Import CSS for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PatientDashboard = () => {\n  _s();\n  const {\n    id\n  } = useParams();\n  const [patient, setPatient] = useState(null);\n  const [medicalRecords, setMedicalRecords] = useState([]);\n  const [appointments, setAppointments] = useState([]);\n  const [activeSection, setActiveSection] = useState('patientInfo'); // Default to 'patientInfo' section\n  const [loading, setLoading] = useState(true); // Loading state to show while data is being fetched\n\n  // Fetch data on component mount\n  useEffect(() => {\n    const fetchPatientInfo = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/patients/${id}`);\n        setPatient(response.data);\n      } catch (error) {\n        console.error('Error fetching patient data:', error);\n      }\n    };\n    const fetchMedicalRecords = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/medical-records/patient/${id}`); // Correct patient ID\n        setMedicalRecords(response.data);\n      } catch (error) {\n        console.error('Error fetching medical records:', error);\n      }\n    };\n    const fetchAppointments = async () => {\n      try {\n        const response = await axios.get(`http://localhost:8080/api/appointments/patient/${id}`); // Correct patient ID\n        setAppointments(response.data);\n      } catch (error) {\n        console.error('Error fetching appointments:', error);\n      }\n    };\n\n    // fetchPatientInfo();\n    // fetchMedicalRecords();\n    // fetchAppointments();\n    // setLoading(false); // Set loading to false once data is fetched\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        await Promise.all([fetchPatientInfo(), fetchMedicalRecords(), fetchAppointments()]);\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [id]);\n\n  // If still loading, show a loading message\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loading\",\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }, this);\n  }\n\n  // Handle updating patient info\n  const handleUpdatePatientInfo = async updatedPatient => {\n    try {\n      const response = await axios.put(`http://localhost:8080/api/patients/${updatedPatient.id}`, updatedPatient, {\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.status === 200) {\n        setPatient(response.data); // Update the local patient data with the updated data\n      }\n    } catch (error) {\n      console.error('Error updating patient info:', error);\n    }\n  };\n\n  // Render the selected section based on activeSection\n  const renderSection = () => {\n    switch (activeSection) {\n      case 'patientInfo':\n        return /*#__PURE__*/_jsxDEV(PatientInfo, {\n          patient: patient,\n          onUpdatePatientInfo: handleUpdatePatientInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 24\n        }, this);\n      case 'medicalRecords':\n        return /*#__PURE__*/_jsxDEV(MedicalRecords, {\n          records: medicalRecords\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 24\n        }, this);\n      case 'appointments':\n        return /*#__PURE__*/_jsxDEV(Appointments, {\n          appointments: appointments\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 24\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(PatientInfo, {\n          patient: patient,\n          onUpdatePatientInfo: handleUpdatePatientInfo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 24\n        }, this);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"patient-dashboard\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"sidebar-container\",\n      children: /*#__PURE__*/_jsxDEV(PatientSidebar, {\n        setActiveSection: setActiveSection\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      children: renderSection()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n_s(PatientDashboard, \"DENkG8K1kTakng4+70xHmtukm/0=\", false, function () {\n  return [useParams];\n});\n_c = PatientDashboard;\nexport default PatientDashboard;\nvar _c;\n$RefreshReg$(_c, \"PatientDashboard\");","map":{"version":3,"names":["React","useEffect","useState","axios","useParams","PatientInfo","MedicalRecords","Appointments","PatientSidebar","jsxDEV","_jsxDEV","PatientDashboard","_s","id","patient","setPatient","medicalRecords","setMedicalRecords","appointments","setAppointments","activeSection","setActiveSection","loading","setLoading","fetchPatientInfo","response","get","data","error","console","fetchMedicalRecords","fetchAppointments","fetchData","Promise","all","className","children","fileName","_jsxFileName","lineNumber","columnNumber","handleUpdatePatientInfo","updatedPatient","put","headers","status","renderSection","onUpdatePatientInfo","records","_c","$RefreshReg$"],"sources":["C:/Users/essam/OneDrive/Desktop/New folder/HealthLink/healthlink_frontend-V2/src/Pages/DashboardPatient.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useParams } from 'react-router-dom';\r\nimport PatientInfo from '../Components/PatientInfo';\r\nimport MedicalRecords from '../Components/MedicalRecords';\r\nimport Appointments from '../Components/Appointments';\r\nimport PatientSidebar from '../Components/PatientSidebar';\r\nimport '../Styles/PatientDashboard.css'; // Import CSS for styling\r\n\r\nconst PatientDashboard = () => {\r\n    const { id } = useParams();\r\n    const [patient, setPatient] = useState(null);\r\n    const [medicalRecords, setMedicalRecords] = useState([]);\r\n    const [appointments, setAppointments] = useState([]);\r\n    const [activeSection, setActiveSection] = useState('patientInfo'); // Default to 'patientInfo' section\r\n    const [loading, setLoading] = useState(true); // Loading state to show while data is being fetched\r\n\r\n    // Fetch data on component mount\r\n    useEffect(() => {\r\n        const fetchPatientInfo = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8080/api/patients/${id}`);\r\n                setPatient(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching patient data:', error);\r\n            }\r\n        };\r\n\r\n        const fetchMedicalRecords = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8080/api/medical-records/patient/${id}`); // Correct patient ID\r\n                setMedicalRecords(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching medical records:', error);\r\n            }\r\n        };\r\n\r\n        const fetchAppointments = async () => {\r\n            try {\r\n                const response = await axios.get(`http://localhost:8080/api/appointments/patient/${id}`); // Correct patient ID\r\n                setAppointments(response.data);\r\n            } catch (error) {\r\n                console.error('Error fetching appointments:', error);\r\n            }\r\n        };\r\n\r\n       // fetchPatientInfo();\r\n        // fetchMedicalRecords();\r\n       // fetchAppointments();\r\n       // setLoading(false); // Set loading to false once data is fetched\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                await Promise.all([fetchPatientInfo(), fetchMedicalRecords(), fetchAppointments()]);\r\n            } catch (error) {\r\n                console.error('Error fetching data:', error);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n\r\n    }, [id]);\r\n\r\n    // If still loading, show a loading message\r\n    if (loading) {\r\n        return <div className=\"loading\">Loading...</div>;\r\n    }\r\n\r\n    // Handle updating patient info\r\n    const handleUpdatePatientInfo = async (updatedPatient) => {\r\n        try {\r\n            const response = await axios.put(`http://localhost:8080/api/patients/${updatedPatient.id}`, updatedPatient, {\r\n                headers: {\r\n                    'Content-Type': 'application/json',\r\n                },\r\n            });\r\n\r\n            if (response.status === 200) {\r\n                setPatient(response.data); // Update the local patient data with the updated data\r\n            }\r\n        } catch (error) {\r\n            console.error('Error updating patient info:', error);\r\n        }\r\n    };\r\n\r\n    // Render the selected section based on activeSection\r\n    const renderSection = () => {\r\n        switch (activeSection) {\r\n            case 'patientInfo':\r\n                return <PatientInfo patient={patient} onUpdatePatientInfo={handleUpdatePatientInfo} />;\r\n            case 'medicalRecords':\r\n                return <MedicalRecords records={medicalRecords} />;\r\n            case 'appointments':\r\n                return <Appointments appointments={appointments} />;\r\n            default:\r\n                return <PatientInfo patient={patient} onUpdatePatientInfo={handleUpdatePatientInfo} />;\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"patient-dashboard\">\r\n            {/* Sidebar on the left */}\r\n            <div className=\"sidebar-container\">\r\n                <PatientSidebar setActiveSection={setActiveSection} />\r\n            </div>\r\n\r\n            {/* Main content area */}\r\n            <div className=\"main-content\">\r\n                {renderSection()}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default PatientDashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}